// Code generated by counterfeiter. DO NOT EDIT.
package actionfakes

import (
	"context"
	"sync"

	"github.com/jace-ys/actions-mobydick/bin/pkg/action"
	"github.com/jace-ys/actions-mobydick/bin/pkg/worker"
)

type FakeWorkerPool struct {
	WorkStub        func(context.Context, []worker.Job) []worker.Result
	workMutex       sync.RWMutex
	workArgsForCall []struct {
		arg1 context.Context
		arg2 []worker.Job
	}
	workReturns struct {
		result1 []worker.Result
	}
	workReturnsOnCall map[int]struct {
		result1 []worker.Result
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerPool) Work(arg1 context.Context, arg2 []worker.Job) []worker.Result {
	var arg2Copy []worker.Job
	if arg2 != nil {
		arg2Copy = make([]worker.Job, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.workMutex.Lock()
	ret, specificReturn := fake.workReturnsOnCall[len(fake.workArgsForCall)]
	fake.workArgsForCall = append(fake.workArgsForCall, struct {
		arg1 context.Context
		arg2 []worker.Job
	}{arg1, arg2Copy})
	fake.recordInvocation("Work", []interface{}{arg1, arg2Copy})
	fake.workMutex.Unlock()
	if fake.WorkStub != nil {
		return fake.WorkStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.workReturns
	return fakeReturns.result1
}

func (fake *FakeWorkerPool) WorkCallCount() int {
	fake.workMutex.RLock()
	defer fake.workMutex.RUnlock()
	return len(fake.workArgsForCall)
}

func (fake *FakeWorkerPool) WorkCalls(stub func(context.Context, []worker.Job) []worker.Result) {
	fake.workMutex.Lock()
	defer fake.workMutex.Unlock()
	fake.WorkStub = stub
}

func (fake *FakeWorkerPool) WorkArgsForCall(i int) (context.Context, []worker.Job) {
	fake.workMutex.RLock()
	defer fake.workMutex.RUnlock()
	argsForCall := fake.workArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWorkerPool) WorkReturns(result1 []worker.Result) {
	fake.workMutex.Lock()
	defer fake.workMutex.Unlock()
	fake.WorkStub = nil
	fake.workReturns = struct {
		result1 []worker.Result
	}{result1}
}

func (fake *FakeWorkerPool) WorkReturnsOnCall(i int, result1 []worker.Result) {
	fake.workMutex.Lock()
	defer fake.workMutex.Unlock()
	fake.WorkStub = nil
	if fake.workReturnsOnCall == nil {
		fake.workReturnsOnCall = make(map[int]struct {
			result1 []worker.Result
		})
	}
	fake.workReturnsOnCall[i] = struct {
		result1 []worker.Result
	}{result1}
}

func (fake *FakeWorkerPool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.workMutex.RLock()
	defer fake.workMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerPool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ action.WorkerPool = new(FakeWorkerPool)
